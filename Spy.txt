--[[
    Enhanced HttpSpy v3.0
    Features: Full Variable & Code Fetching, Deep Scan, Base64 & String Decryption, Reverse Engineering, Hidden Variable & Value Logging
]]

if rconsoleprint then
    rconsoleprint("https://eleutheri.com - #1 Whitelist Service\n\n")
end;

assert(syn or http, "Unsupported exploit (should support syn.request or http.request)");

local options = ({...})[1] or {
    AutoDecode = true,
    Highlighting = true,
    SaveLogs = true,
    CLICommands = true,
    ShowResponse = true,
    BlockedURLs = {},
    API = true,
    DeepScan = true,
    Base64Decode = true,
    StringDecrypt = true,
    FetchHiddenVars = true,
    FetchAllVariables = true
};

local logname = "Shinzou.json"
if options.SaveLogs then
    writefile(logname, string.format("Http Logs from %s\n\n", os.date("%d/%m/%y"))) 
end;

local Serializer = loadstring(game:HttpGet("https://raw.githubusercontent.com/NotDSF/leopard/main/rbx/leopard-syn.lua"))();
local clonef = clonefunction;
local function base64decode(data)
    return syn.crypt.base64.decode(data) or "[Failed to decode]"
end;

local function decryptString(str)
    return syn.crypt.decrypt(str, "key") or "[Decryption Failed]"
end;

local function deepScan()
    local scannedData = {}
    for _, obj in pairs(getgc(true)) do
        if type(obj) == "function" and islclosure(obj) then
            local constTable = {}
            for _, const in ipairs(debug.getconstants(obj)) do
                table.insert(constTable, const)
            end
            table.insert(scannedData, constTable)
        end
    end
    appendfile(logname, "[table]:" .. Serializer.Serialize(scannedData) .. "\n\n")
end;

local function fetchAllVariables()
    local allVars = {}
    for k, v in pairs(getgenv()) do
        allVars[k] = v
    end
    for k, v in pairs(getreg()) do
        allVars[k] = v
    end
    for _, obj in pairs(getgc(true)) do
        if type(obj) == "table" then
            for k, v in pairs(obj) do
                allVars[k] = v
            end
        end
    end
    appendfile(logname, "[table]:" .. Serializer.Serialize(allVars) .. "\n\n")
end;

local reqfunc = (syn or http).request;
local libtype = syn and "syn" or "http";
local proxied = {};
local hooked = {};

local __request;
__request = hookfunction(reqfunc, newcclosure(function(req) 
    if type(req) ~= "table" then return __request(req); end;
    local RequestData = table.clone(req);
    
    if options.DeepScan then
        deepScan();
    end
    
    if options.FetchAllVariables then
        fetchAllVariables();
    end
    
    if options.Base64Decode and RequestData.Body then
        RequestData.Body = base64decode(RequestData.Body);
    end
    
    if options.StringDecrypt and RequestData.Body then
        RequestData.Body = decryptString(RequestData.Body);
    end
    
    return __request(req);
end));

if syn and syn.websocket then
    local WsConnect, WsBackup = debug.getupvalue(syn.websocket.connect, 1);
    WsBackup = hookfunction(WsConnect, function(...) 
        rconsoleprint("syn.websocket.connect(...)\n");
        return WsBackup(...);
    end);
end;

return {Hooked = hooked, Proxy = proxied};
