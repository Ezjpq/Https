--[[
    ClientHttpLogger v1.0.3
    Educational HTTP request logger for client-side debugging
]]

assert(syn or http, "Unsupported exploit (requires syn.request or http.request)")

local options = {
    AutoDecode = true,
    SaveLogs = true,
    ShowResponse = true,
    LogEnvVars = true,
    FetchURLs = true,
    BlockedURLs = {}
}

local logFile = "ClientLogs.json"
local Serializer = loadstring(game:HttpGet("https://raw.githubusercontent.com/NotDSF/leopard/main/rbx/leopard-syn.lua"))()

if options.SaveLogs then
    writefile(logFile, string.format("Client HTTP Logs from %s\n\n", os.date("%d/%m/%y")))
end

local function logToFile(data)
    if options.SaveLogs then
        appendfile(logFile, data .. "\n\n")
    end
end

local function logToConsole(data)
    if rconsoleprint then
        rconsoleprint(data .. "\n")
    end
end

local function fetchEnvironmentVars()
    local envVars = "Environment Variables Fetched:\n"
    
    for i, v in pairs(getfenv()) do
        envVars = envVars .. "[" .. i .. "] = \"" .. tostring(v) .. "\",\n"
    end
    
    for i, v in pairs(debug.getregistry()) do
        envVars = envVars .. "[Registry_" .. tostring(i) .. "] = \"" .. tostring(v) .. "\",\n"
    end
    
    for i, v in pairs(_G) do
        envVars = envVars .. "[Global_" .. tostring(i) .. "] = \"" .. tostring(v) .. "\",\n"
    end
    
    for level = 1, math.huge do
        local name, value = debug.getlocal(level, 1)
        if not name then break end
        envVars = envVars .. "[Local_" .. name .. "] = \"" .. tostring(value) .. "\",\n"
    end
    
    return envVars
end

local function fetchURLs()
    local urlData = "URLs Fetched:\n"
    for i, v in pairs(debug.getregistry()) do
        if type(v) == "string" and v:match("^https?://") then
            urlData = urlData .. "[URL_" .. tostring(i) .. "] = \"" .. v .. "\",\n"
        end
    end
    return urlData
end

if options.LogEnvVars then
    local envData = fetchEnvironmentVars()
    local urlData = options.FetchURLs and fetchURLs() or ""
    logToFile(envData .. "\n" .. urlData)
    logToConsole("[INFO] Environment variables and URLs saved.")
end

local reqFunc = (syn or http).request
local originalRequest = hookfunction(reqFunc, newcclosure(function(req)
    if type(req) ~= "table" or not req.Url then return originalRequest(req) end
    
    if options.BlockedURLs[req.Url] then
        logToConsole("[BLOCKED] " .. req.Url)
        return { StatusCode = 403, Body = "Blocked Request" }
    end
    
    local requestLog = "URL fetched:\n[Request] = \"" .. req.Url .. "\"\n"
    logToConsole("[HTTP] " .. req.Url)
    logToFile(requestLog .. "Request Data:\n" .. Serializer.Serialize(req))
    
    local success, response = pcall(originalRequest, req)
    if not success then return error("Request failed: " .. response) end
    
    if options.ShowResponse then
        logToConsole("[RESPONSE] " .. Serializer.Serialize(response))
        logToFile("Response Data:\n" .. Serializer.Serialize(response))
    end
    
    return response
end))

logToConsole("ClientHttpLogger initialized. Logging all client-side HTTP requests, environment variables, and fetched URLs.")
