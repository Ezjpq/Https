--[[
    ClientHttpLogger v1.1.0 (With Script Decompilation)
    Logs client-side HTTP requests and attempts to decompile fetched scripts.
]]

assert(syn and syn.request or http and http.request, "Unsupported exploit (requires syn.request or http.request)")

local options = {
    AutoDecode = true,
    SaveLogs = true,
    ShowResponse = true,
    LogEnvVars = true,
    FetchURLs = true,
    BlockedURLs = {
        ["https://badsite.com"] = true, -- Example blocked site
    },
    AttemptDecompile = true -- New option to attempt script decompilation
}

local logFile = "ClientLogs.json"
local Serializer = loadstring(game:HttpGet("https://raw.githubusercontent.com/NotDSF/leopard/main/rbx/leopard-syn.lua"))()

if options.SaveLogs then
    writefile(logFile, string.format("Client HTTP Logs from %s\n\n", os.date("%d/%m/%y")))
end

local function logToFile(data)
    if options.SaveLogs then
        appendfile(logFile, data .. "\n\n")
    end
end

local function logToConsole(data)
    if rconsoleprint then
        rconsoleprint(data .. "\n")
    end
end

local function fetchEnvironmentVars()
    local envVars = "Environment Variables Fetched:\n"
    
    for i, v in pairs(getfenv()) do
        envVars = envVars .. string.format("[%s] = \"%s\",\n", i, tostring(v))
    end
    
    for i, v in pairs(_G) do
        envVars = envVars .. string.format("[Global_%s] = \"%s\",\n", i, tostring(v))
    end
    
    return envVars
end

local function fetchURLs()
    local urlData = "URLs Fetched:\n"
    for i, v in pairs(debug.getregistry()) do
        if type(v) == "string" and v:match("^https?://") then
            urlData = urlData .. string.format("[URL_%s] = \"%s\",\n", tostring(i), v)
        end
    end
    return urlData
end

if options.LogEnvVars then
    local envData = fetchEnvironmentVars()
    local urlData = options.FetchURLs and fetchURLs() or ""
    logToFile(envData .. "\n" .. urlData)
    logToConsole("[INFO] Environment variables and URLs saved.")
end

local reqFunc = syn and syn.request or http.request
local originalRequest = reqFunc

local function attemptDecompile(scriptSource)
    if not scriptSource or scriptSource == "" then return "Decompilation failed: Empty or invalid script." end
    local decompiledScript = "Decompilation failed: No available method."

    -- Try different decompilation methods
    if decompile then
        local success, result = pcall(decompile, scriptSource)
        if success then decompiledScript = result end
    elseif dumpstring then
        local success, result = pcall(dumpstring, scriptSource)
        if success then decompiledScript = result end
    elseif string.dump then
        local success, result = pcall(string.dump, loadstring(scriptSource, "Decompiled"))
        if success then decompiledScript = result end
    end

    return decompiledScript
end

local function newRequest(req)
    if type(req) ~= "table" or not req.Url then return originalRequest(req) end
    
    if options.BlockedURLs[req.Url] then
        logToConsole("[BLOCKED] " .. req.Url)
        return { StatusCode = 403, Body = "Blocked Request" }
    end
    
    local requestLog = string.format("URL fetched:\n[Request] = \"%s\"\n", req.Url)
    logToConsole("[HTTP] " .. req.Url)
    logToFile(requestLog .. "Request Data:\n" .. Serializer.Serialize(req))
    
    local success, response = pcall(originalRequest, req)
    if not success then return error("Request failed: " .. response) end
    
    if options.ShowResponse then
        logToConsole("[RESPONSE] " .. Serializer.Serialize(response))
        logToFile("Response Data:\n" .. Serializer.Serialize(response))
    end

    -- Attempt script decompilation if the response looks like a script
    if options.AttemptDecompile and response.Body and response.Body:find("function") then
        local decompiled = attemptDecompile(response.Body)
        logToConsole("[DECOMPILED SCRIPT] " .. decompiled)
        logToFile("Script Decompiled:\n" .. decompiled)
    end
    
    return response
end

hookfunction(originalRequest, newRequest)

logToConsole("ClientHttpLogger initialized. Logging all client-side HTTP requests, environment variables, and fetched URLs. Now attempting script decompilation.")
